<?xml version="1.0" encoding="UTF-8"?>  
<beans   
    xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"   
    xmlns:aop="http://www.springframework.org/schema/aop"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:mvc="http://www.springframework.org/schema/mvc"   
    xmlns:util="http://www.springframework.org/schema/util"  
    xmlns:tx="http://www.springframework.org/schema/tx"  
    xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
    xmlns:cache="http://www.springframework.org/schema/cache" 
    xmlns:websocket="http://www.springframework.org/schema/websocket"
    xsi:schemaLocation="  
        http://www.springframework.org/schema/websocket
        http://www.springframework.org/schema/websocket/spring-websocket.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd  
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd  
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd  
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd  
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd  
        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd  
        http://www.springframework.org/schema/cache  http://www.springframework.org/schema/cache/spring-cache-3.1.xsd">  
        <!-- 扫描 -->  
   <context:component-scan base-package="com.cms_cloudy" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
   </context:component-scan>   
   <!--加入Spring Activiti-Modeler的运行配置 -->
    <context:component-scan base-package="org.activiti.rest.editor" />
    <context:component-scan base-package="org.activiti.rest.diagram" />  
    <!-- 注解驱动 -->  
    <!-- 指定自己定义的validator -->
    <mvc:annotation-driven validator="validator"/>
    <!-- 以下 validator ConversionService 在使用 mvc:annotation-driven 会 自动注册 -->
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
        <!-- 如果不加默认到 使用classpath下的 ValidationMessages.properties -->
        <property name="validationMessageSource" ref="messageSource"/>
    </bean>  
    
    <!-- 国际化的消息资源文件（本系统中主要用于显示/错误消息定制） -->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <!-- 在web环境中一定要定位到classpath 否则默认到当前web应用下找 -->
                <value>classpath:messages</value>
                <value>classpath:org/hibernate/validator/ValidationMessages</value>
            </list>
        </property>
        <!--<property name="useCodeAsDefaultMessage" value="false"/>-->
        <property name="defaultEncoding" value="UTF-8"/>
        <!--<property name="cacheSeconds" value="60"/>-->
    </bean>
    <mvc:interceptors>
        <bean id="localeChangeInterceptor" class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
            <property name="paramName" value="lang"/>
        </bean>
    </mvc:interceptors>
     <mvc:interceptors>
     	<!-- 国际化操作拦截器 如果采用基于（请求/Session/Cookie）则必需配置 --> 
        <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"/>
          <!--<bean class="com.cms_cloudy.web.controller.GlobalController"></bean> -->
    </mvc:interceptors>
     <bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver">
		 <property name="defaultLocale" value="zh_CN"/>
		<!-- 设置cookieName名称，可以根据名称通过js来修改设置，也可以像上面演示的那样修改设置，默认的名称为 类名+LOCALE（即：org.springframework.web.servlet.i18n.CookieLocaleResolver.LOCALE-->
		<!-- <property name="cookieMaxAge" value="100000"/>设置最大有效时间，如果是-1，则不存储，浏览器关闭后即失效，默认为Integer.MAX_INT-->
		<!-- 设置cookie可见的地址，默认是“/”即对网站所有地址都是可见的，如果设为其它地址，则只有该地址或其后的地址才可见-->
		<!--<property name="cookiePath" value="/"/>-->
		<!-- <property name="cookieMaxAge" value="100000"/>-->
    </bean>
    
<!--     <context:annotation-config />  -->   
<!-- context:component-scan 具有annotation-config 的功能 -->  
    <!--  视图解析器 -->  
    <bean id="viewResolver"  class="org.springframework.web.servlet.view.InternalResourceViewResolver">  
    <property  name="prefix" value="/pages/"> </property>  
    <property name="suffix"  value=".jsp"></property>  
    </bean>
     
      <!-- 内容协商管理器  -->
    <!--1、首先检查路径扩展名（如my.pdf）；2、其次检查Parameter（如my?format=pdf）；3、检查Accept Header-->
    <bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
        <!-- 扩展名至mimeType的映射,即 /user.json => application/json -->
        <property name="favorPathExtension" value="true"/>
        <!-- 用于开启 /userinfo/123?format=json 的支持 -->
        <property name="favorParameter" value="true"/>
        <property name="parameterName" value="format"/>
        <!-- 是否忽略Accept Header -->
        <property name="ignoreAcceptHeader" value="false"/>

        <property name="mediaTypes"> <!--扩展名到MIME的映射；favorPathExtension, favorParameter是true时起作用  -->
            <value>
                json=application/json
                xml=application/xml
                html=text/html
            </value>
        </property>
        <!-- 默认的content type -->
        <property name="defaultContentType" value="text/html"/>
    </bean>
     <!-- 支持返回json(避免IE在ajax请求时，返回json出现下载 ) -->
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="mappingJacksonHttpMessageConverter"/>
            </list>
        </property>
    </bean>
      <bean id="mappingJacksonHttpMessageConverter"
          class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/plain;charset=UTF-8</value>
                <value>application/json;charset=UTF-8</value>
            </list>
        </property>
    </bean>
    <!--- websocket com.ld.net.spider.demo.ws
   <bean id="wsHandler" class="com.cms_cloudy.websocket.config.SystemWebSocketHandler"/>
    <websocket:handlers>
        <websocket:mapping path="/springws/websocket" handler="wsHandler"/>
         <websocket:handshake-interceptors>
            <bean class="com.cms_cloudy.websocket.Interceptor.HandshakeInterceptor"/>
        </websocket:handshake-interceptors>
       <websocket:sockjs/>
    </websocket:handlers>-->
    <!--- websocket-->
    
    <!-- 配置springMVC处理上传文件的信息 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="utf-8"/>
        <property name="maxUploadSize" value="10485760000"/>
        <property name="maxInMemorySize" value="40960"/>
    </bean>
    <!-- 当在web.xml 中   DispatcherServlet使用 <url-pattern>/</url-pattern> 映射时，能映射静态资源 -->
    <mvc:default-servlet-handler />  
    <!-- 静态资源映射 -->
    <mvc:resources mapping="/static/**" location="/WEB-INF/static/"/> 
</beans>  
<!-- <context:component-scan/> 配置项不但启用了对类包进行扫描以实施注释驱动 Bean 定义的功能，
同时还启用了注释驱动自动注入的功能（即还隐式地在内部注册了 AutowiredAnnotationBeanPostProcessor 和 CommonAnnotationBeanPostProcessor），
因此当使用<context:component-scan base-package="xxx.xxx.xxx"/> 后，
就可以将 <context:annotation-config/> 移除了。   -->